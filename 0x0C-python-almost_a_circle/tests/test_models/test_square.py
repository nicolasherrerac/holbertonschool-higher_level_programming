#!/usr/bin/python3
"""module for use in testing
    rectangle class
"""
import sys
import unittest
from models.square import Square


class TestSquare(unittest.TestCase):
    """class for test case for rectangle class
    """

    def test_basic_id(self):
        """tests basic functionality
        """
        b = Square(10, 2)
        b2 = Square(2, 10)
        b3 = Square(3, 10)
        self.assertEqual(b2.id + 1, b3.id)

    def test_given_id(self):
        """tests given id, not generated by init
        """
        b = Square(10, 2)
        b2 = Square(10, 3)
        b3 = Square(10, 4)
        b4 = Square(10, 5, 0, 42)
        self.assertEqual(b2.id + 1, b3.id)
        self.assertEqual(42, b4.id)

    def test_input_types(self):
        """tests type errors when creating a square
        """
        with self.assertRaises(TypeError):
            n = Square("hello", "world")
        with self.assertRaises(TypeError):
            n = Square(5.4, 3.8)
        with self.assertRaises(TypeError):
            n = Square(4, 8, "hello", "world")
        with self.assertRaises(TypeError):
            n = Square(4, 8, 5.12, 5.9)
        with self.assertRaises(TypeError):
            n = Square(True, False, True, 49)

    def test_area(self):
        """tests that the area method for squares works
        """
        r = Square(4, 8)
        self.assertEqual(r.area(), 16)

    def test_to_dictionary(self):
        """tests square's to_dictionary method
        """
        r = Square(5, 1, 2, 33)
        r_dict = r.to_dictionary()
        self.assertEqual(r_dict['id'], 33)
        self.assertEqual(r_dict['size'], 5)
        self.assertEqual(r_dict['x'], 1)
        self.assertEqual(r_dict['y'], 2)
